<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>合并图片</title>
    <url>/2020/10/03/combain-image/</url>
    <content><![CDATA[<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">width = <span class="number">0</span></span><br><span class="line">height = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> imageFile <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">with</span> Image.open(imageFile) <span class="keyword">as</span> im2:</span><br><span class="line">        width = width + im2.size[<span class="number">0</span>]</span><br><span class="line">        height = max(height, im2.size[<span class="number">1</span>])</span><br><span class="line">im = Image.new(<span class="string">&#x27;RGB&#x27;</span>, (width, height))</span><br><span class="line">width = <span class="number">0</span></span><br><span class="line">height = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> imageFile <span class="keyword">in</span> sys.argv[<span class="number">1</span>:]:</span><br><span class="line">    <span class="keyword">with</span> Image.open(imageFile) <span class="keyword">as</span> im2:</span><br><span class="line">        im2_width = im2.size[<span class="number">0</span>]</span><br><span class="line">        im2_height = im2.size[<span class="number">1</span>]</span><br><span class="line">        im.paste(im2.crop((<span class="number">0</span>, <span class="number">0</span>, im2_width, im2_height)), (width, <span class="number">0</span>, width + im2_width, im2_height))</span><br><span class="line">        width = width + im2_width</span><br><span class="line">im.save(<span class="string">&#x27;result.jpeg&#x27;</span>, <span class="string">&#x27;JPEG&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>用几何原语再现图像</title>
    <url>/2020/10/04/primitive/</url>
    <content><![CDATA[<p><img src="/assets/me_rect.jpg"><br><img src="/assets/me_cricle.jpg"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">draw_circle</span>(<span class="params">startX, startY, radius, r, g, b</span>):</span></span><br><span class="line">    pu()</span><br><span class="line">    colormode(<span class="number">255</span>)</span><br><span class="line">    pencolor(r, g, b)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fillcolor((r, g, b))</span><br><span class="line">    goto(startX, startY)</span><br><span class="line">    pd()</span><br><span class="line">    </span><br><span class="line">    circle(radius)</span><br><span class="line">    </span><br><span class="line">    end_fill()</span><br><span class="line">    pu()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">line</span>(<span class="params">startX, startY, endX, endY, r, g, b</span>):</span></span><br><span class="line">    colormode(<span class="number">255</span>)</span><br><span class="line">    pencolor(r, g, b)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fillcolor((r, g, b))</span><br><span class="line">    goto(startX, startY)</span><br><span class="line">    pd()</span><br><span class="line">    forward(abs(endX - startX))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    forward(abs(endY - startY))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    forward(abs(endX - startX))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    forward(abs(endY - startY))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    </span><br><span class="line">    end_fill()</span><br><span class="line">    pu()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rect</span>(<span class="params">startX, startY, endX, endY, r, g, b</span>):</span></span><br><span class="line">    colormode(<span class="number">255</span>)</span><br><span class="line">    pencolor(r, g, b)</span><br><span class="line">    begin_fill()</span><br><span class="line">    fillcolor((r, g, b))</span><br><span class="line">    goto(startX, startY)</span><br><span class="line">    pd()</span><br><span class="line">    forward(abs(endX - startX))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    forward(abs(endY - startY))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    forward(abs(endX - startX))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    forward(abs(endY - startY))</span><br><span class="line">    right(<span class="number">90</span>)</span><br><span class="line">    </span><br><span class="line">    end_fill()</span><br><span class="line">    pu()</span><br><span class="line"></span><br><span class="line">json = json.loads(jsonStr)</span><br><span class="line">data = json[<span class="string">&quot;shapes&quot;</span>]</span><br><span class="line"></span><br><span class="line">speed(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">s0 = data[<span class="number">0</span>]</span><br><span class="line">pos = s0[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">color = s0[<span class="string">&quot;color&quot;</span>]</span><br><span class="line">rect(pos[<span class="number">0</span>]  - <span class="number">250</span> , -pos[<span class="number">1</span>] + <span class="number">300</span> , pos[<span class="number">2</span>]  - <span class="number">250</span> , -pos[<span class="number">3</span>]  + <span class="number">300</span> , color[<span class="number">0</span>], color[<span class="number">1</span>], color[<span class="number">2</span>])</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> data[<span class="number">1</span>:]:</span><br><span class="line">    pos = s[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    color = s[<span class="string">&quot;color&quot;</span>]</span><br><span class="line">    draw_circle(pos[<span class="number">0</span>] - <span class="number">250</span> , -pos[<span class="number">1</span>] + <span class="number">300</span> - pos[<span class="number">2</span>] , pos[<span class="number">2</span>] , color[<span class="number">0</span>], color[<span class="number">1</span>], color[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>
<p><img src="/assets/me.jpg"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> drawing=<span class="built_in">document</span>.getElementById(<span class="string">&quot;myCanvas&quot;</span>);</span><br><span class="line">	<span class="keyword">if</span> (drawing.getContext)&#123;</span><br><span class="line">		<span class="keyword">var</span> ctx = drawing.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">heart</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">var</span> arrays = data[<span class="string">&quot;shapes&quot;</span>];</span><br><span class="line">		<span class="keyword">var</span> pos = arrays[index][<span class="string">&quot;data&quot;</span>];</span><br><span class="line">		<span class="keyword">var</span> color = arrays[index][<span class="string">&quot;color&quot;</span>];</span><br><span class="line">		<span class="keyword">var</span> type = arrays[index][<span class="string">&quot;type&quot;</span>];</span><br><span class="line">		<span class="keyword">switch</span>(type)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">1</span>: </span><br><span class="line">		ctx.fillStyle = <span class="string">&quot;rgba(&quot;</span> + color[<span class="number">0</span>] + <span class="string">&quot;, &quot;</span>+ color[<span class="number">1</span>] + <span class="string">&quot;,  &quot;</span>+ color[<span class="number">2</span>] + <span class="string">&quot;, &quot;</span> + color[<span class="number">3</span>] / <span class="number">255</span> + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">		ctx.fillRect (pos[<span class="number">0</span>] , pos[<span class="number">1</span>] ,(pos[<span class="number">2</span>] - pos[<span class="number">0</span>]) , (pos[<span class="number">3</span>] - pos[<span class="number">1</span>]));</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="number">32</span>:</span><br><span class="line">          ctx.fillStyle = <span class="string">&quot;rgba(&quot;</span> + color[<span class="number">0</span>] + <span class="string">&quot;, &quot;</span>+ color[<span class="number">1</span>] + <span class="string">&quot;,  &quot;</span>+ color[<span class="number">2</span>] + <span class="string">&quot;, &quot;</span> + color[<span class="number">3</span>] / <span class="number">255</span> + <span class="string">&quot;)&quot;</span>;</span><br><span class="line">		   ctx.beginPath();</span><br><span class="line">		   ctx.arc(pos[<span class="number">0</span>] ,pos[<span class="number">1</span>] ,pos[<span class="number">2</span>] ,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">		   ctx.fill();</span><br><span class="line">		   <span class="keyword">break</span>;</span><br><span class="line">		   <span class="comment">//case 64:</span></span><br><span class="line">		   <span class="comment">//ctx.strokeStyle=&quot;rgba(&quot; + color[0] + &quot;, &quot;+ color[1] + &quot;,  &quot;+ color[2] + &quot;, &quot; + color[3] / 255 + &quot;)&quot;;</span></span><br><span class="line">		   <span class="comment">//ctx.beginPath();</span></span><br><span class="line">		   <span class="comment">//ctx.moveTo(n.get_x1(a),n.get_y1(a));</span></span><br><span class="line">		   <span class="comment">//ctx.lineTo(n.get_x2(a),n.get_y2(a));</span></span><br><span class="line">		   <span class="comment">//ctx.stroke();</span></span><br><span class="line">		   <span class="comment">//break; --&gt;</span></span><br><span class="line">		   &#125;</span><br><span class="line">            index++;</span><br><span class="line">            <span class="keyword">if</span> (index &gt; arrays.length)&#123;</span><br><span class="line">                <span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        intervalId = <span class="built_in">setInterval</span>(heart,<span class="number">25</span>);</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://github.com/fogleman/primitive">https://github.com/fogleman/primitive</a></p>
<p><a href="https://www.samcodes.co.uk/project/geometrize-haxe-web/">https://www.samcodes.co.uk/project/geometrize-haxe-web/</a></p>
]]></content>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>802.1.x认证</title>
    <url>/2020/10/04/802-1-x/</url>
    <content><![CDATA[<p>由于不清楚密码如何加密的，只能抓包获取认证的密钥。生成password.bin用于后面认证。</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/google/gopacket&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/google/gopacket/layers&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/google/gopacket/pcap&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> iface = flag.String(<span class="string">&quot;i&quot;</span>, <span class="string">&quot;\\Device\\NPF_&#123;540078E3-B5F2-4E7A-9D21-&#125;&quot;</span>, <span class="string">&quot;Interface to read packets from&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line">	filterStr := fmt.Sprintf(<span class="string">&quot;(ether proto 0x888e)&quot;</span>)</span><br><span class="line">	fmt.Println(*iface)</span><br><span class="line">	handle, err := pcap.OpenLive(*iface, <span class="number">65536</span>, <span class="literal">true</span>, pcap.BlockForever)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	err = handle.SetBPFFilter(filterStr)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> handle.Close()</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> userName, passWord []<span class="keyword">byte</span></span><br><span class="line">	<span class="keyword">for</span> userName == <span class="literal">nil</span> || passWord == <span class="literal">nil</span> &#123;</span><br><span class="line">		data, _, err := handle.ReadPacketData()</span><br><span class="line">		<span class="keyword">if</span> err == pcap.NextErrorTimeoutExpired &#123;</span><br><span class="line">			<span class="keyword">continue</span></span><br><span class="line">		&#125; <span class="keyword">else</span> <span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">			<span class="built_in">panic</span>(err)</span><br><span class="line">		&#125;</span><br><span class="line">		packet := gopacket.NewPacket(data, layers.LayerTypeEthernet, gopacket.NoCopy)</span><br><span class="line">		<span class="keyword">if</span> eapLayer := packet.Layer(layers.LayerTypeEAP); eapLayer != <span class="literal">nil</span> &#123;</span><br><span class="line">			eap := eapLayer.(*layers.EAP)</span><br><span class="line">			<span class="keyword">switch</span> eap.Code &#123;</span><br><span class="line">			<span class="keyword">case</span> layers.EAPCodeResponse:</span><br><span class="line">				<span class="keyword">switch</span> eap.Type &#123;</span><br><span class="line">				<span class="keyword">case</span> layers.EAPTypeIdentity:</span><br><span class="line">					userName = eap.TypeData</span><br><span class="line">					fmt.Printf(<span class="string">&quot;%s&quot;</span>, <span class="keyword">string</span>(userName))</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0x66</span>:</span><br><span class="line">					passWord = eap.TypeData</span><br><span class="line">					fmt.Println()</span><br><span class="line">					fmt.Printf(<span class="string">&quot;%x&quot;</span>, passWord)</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					fmt.Println(<span class="string">&quot;unknown eap type:&quot;</span>, eap.Type)</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">case</span> layers.EAPCodeSuccess:</span><br><span class="line">			<span class="keyword">case</span> layers.EAPCodeFailure:</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				fmt.Println(<span class="string">&quot;unknown epa code:&quot;</span>, eap.Code)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	userName = <span class="built_in">append</span>(userName, <span class="number">0xff</span>)</span><br><span class="line">	userName = <span class="built_in">append</span>(userName, passWord...)</span><br><span class="line">	e := ioutil.WriteFile(<span class="string">&quot;password.bin&quot;</span>, userName, <span class="number">0644</span>)</span><br><span class="line">	<span class="keyword">if</span> e != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(e)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>认证</p>
<figure class="highlight golang"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;flag&quot;</span></span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/google/gopacket&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/google/gopacket/layers&quot;</span></span><br><span class="line">	<span class="string">&quot;github.com/google/gopacket/pcap&quot;</span></span><br><span class="line">	<span class="string">&quot;io/ioutil&quot;</span></span><br><span class="line">	<span class="string">&quot;net&quot;</span></span><br><span class="line">	<span class="string">&quot;sync&quot;</span></span><br><span class="line">	<span class="string">&quot;time&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">	interfaceName <span class="keyword">string</span></span><br><span class="line">	localMac      <span class="keyword">string</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">init</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.StringVar(&amp;interfaceName, <span class="string">&quot;interface&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;interface name&quot;</span>)</span><br><span class="line">	flag.StringVar(&amp;localMac, <span class="string">&quot;mac&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;mac address&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//https://github.com/google/gopacket/issues/456</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	flag.Parse()</span><br><span class="line">	authentication(interfaceName, localMac)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">authentication</span><span class="params">(interfaceName <span class="keyword">string</span>, localMac <span class="keyword">string</span>)</span></span> &#123;</span><br><span class="line"></span><br><span class="line">	filterStr := fmt.Sprintf(</span><br><span class="line">		<span class="string">&quot;(ether proto 0x888e) and (ether dst host %s)&quot;</span>, localMac)</span><br><span class="line">	handle, err := pcap.OpenLive(interfaceName, <span class="number">65536</span>, <span class="literal">true</span>, pcap.BlockForever)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	err = handle.SetBPFFilter(filterStr)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">defer</span> handle.Close()</span><br><span class="line"></span><br><span class="line">	stop := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line">	hwAddr, err := net.ParseMAC(localMac)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	data, err := ioutil.ReadFile(<span class="string">&quot;password.bin&quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="built_in">panic</span>(err)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">var</span> index <span class="keyword">int</span></span><br><span class="line">	<span class="keyword">for</span> i, v := <span class="keyword">range</span> data &#123;</span><br><span class="line">		<span class="keyword">if</span> v == <span class="keyword">byte</span>(<span class="number">0xff</span>) &#123;</span><br><span class="line">			index = i</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	username := <span class="keyword">string</span>(data[<span class="number">0</span>:index])</span><br><span class="line">	passwd := data[index+<span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">go</span> readEap(handle, hwAddr, stop, username, passwd)</span><br><span class="line">	<span class="keyword">defer</span> <span class="built_in">close</span>(stop)</span><br><span class="line"></span><br><span class="line">	time.Sleep(<span class="number">3000</span>)</span><br><span class="line">	<span class="keyword">go</span> broadcast(handle, hwAddr)</span><br><span class="line"></span><br><span class="line">	<span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">	wg.Add(<span class="number">1</span>)</span><br><span class="line">	wg.Wait()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">readEap</span><span class="params">(handle *pcap.Handle, localMac net.HardwareAddr, stop <span class="keyword">chan</span> <span class="keyword">int</span>, username <span class="keyword">string</span>, password []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">	src := gopacket.NewPacketSource(handle, layers.LayerTypeEthernet)</span><br><span class="line">	in := src.Packets()</span><br><span class="line">	<span class="keyword">for</span> &#123;</span><br><span class="line">		<span class="keyword">var</span> packet gopacket.Packet</span><br><span class="line">		<span class="keyword">select</span> &#123;</span><br><span class="line">		<span class="keyword">case</span> &lt;-stop:</span><br><span class="line">			<span class="keyword">return</span></span><br><span class="line">		<span class="keyword">case</span> packet = &lt;-in:</span><br><span class="line">			ethLayer := packet.Layer(layers.LayerTypeEthernet)</span><br><span class="line">			<span class="keyword">if</span> ethLayer == <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">return</span></span><br><span class="line">			&#125;</span><br><span class="line">			eth := ethLayer.(*layers.Ethernet)</span><br><span class="line">			srcMac := eth.SrcMAC</span><br><span class="line"></span><br><span class="line">			eapLayer := packet.Layer(layers.LayerTypeEAP)</span><br><span class="line">			<span class="keyword">if</span> eapLayer == <span class="literal">nil</span> &#123;</span><br><span class="line">				<span class="keyword">continue</span></span><br><span class="line">			&#125;</span><br><span class="line">			eap := eapLayer.(*layers.EAP)</span><br><span class="line">			fmt.Println(<span class="string">&quot;eap data: &quot;</span>, eap)</span><br><span class="line"></span><br><span class="line">			<span class="keyword">switch</span> eap.Code &#123;</span><br><span class="line">			<span class="keyword">case</span> layers.EAPCodeRequest:</span><br><span class="line">				<span class="keyword">switch</span> eap.Type &#123;</span><br><span class="line">				<span class="keyword">case</span> layers.EAPTypeIdentity:</span><br><span class="line">					sendUserName(handle, localMac, srcMac, eap.Id, username)</span><br><span class="line">				<span class="keyword">case</span> <span class="number">0x66</span>:</span><br><span class="line">					sendPassword(handle, localMac, srcMac, eap.Id, password)</span><br><span class="line">				<span class="keyword">default</span>:</span><br><span class="line">					fmt.Println(<span class="string">&quot;unknown eap type:&quot;</span>, eap.Type)</span><br><span class="line">				&#125;</span><br><span class="line">			<span class="keyword">case</span> layers.EAPCodeSuccess:</span><br><span class="line">				stop &lt;- <span class="number">1</span></span><br><span class="line">				fmt.Println(<span class="string">&quot;epa success&quot;</span>)</span><br><span class="line">			<span class="keyword">case</span> layers.EAPCodeFailure:</span><br><span class="line">				fmt.Println(<span class="string">&quot;eap failure&quot;</span>)</span><br><span class="line">			<span class="keyword">default</span>:</span><br><span class="line">				fmt.Println(<span class="string">&quot;unknown epa code:&quot;</span>, eap.Code)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">broadcast</span><span class="params">(handle *pcap.Handle, localMac net.HardwareAddr)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	eth := layers.Ethernet&#123;</span><br><span class="line">		SrcMAC:       localMac,</span><br><span class="line">		DstMAC:       net.HardwareAddr&#123;<span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>, <span class="number">0xff</span>&#125;,</span><br><span class="line">		EthernetType: <span class="number">0x888e</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	eaPol := layers.EAPOL&#123;</span><br><span class="line">		Version: <span class="number">0x01</span>,</span><br><span class="line">		Type:    layers.EAPOLTypeStart,</span><br><span class="line">		Length:  <span class="number">0x00</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	buf := gopacket.NewSerializeBuffer()</span><br><span class="line">	opts := gopacket.SerializeOptions&#123;</span><br><span class="line">		FixLengths:       <span class="literal">true</span>,</span><br><span class="line">		ComputeChecksums: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	gopacket.SerializeLayers(buf, opts, &amp;eth, &amp;eaPol)</span><br><span class="line">	fmt.Println(<span class="string">&quot;broadcast &quot;</span>)</span><br><span class="line">	<span class="keyword">if</span> err := handle.WritePacketData(buf.Bytes()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendUserName</span><span class="params">(handle *pcap.Handle, srcMac net.HardwareAddr, destAddr net.HardwareAddr, id <span class="keyword">uint8</span>, username <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	eth := layers.Ethernet&#123;</span><br><span class="line">		SrcMAC:       srcMac,</span><br><span class="line">		DstMAC:       destAddr,</span><br><span class="line">		EthernetType: <span class="number">0x888e</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	eap := layers.EAP&#123;</span><br><span class="line">		Code:     layers.EAPCodeResponse,</span><br><span class="line">		Id:       id,</span><br><span class="line">		Length:   <span class="keyword">uint16</span>(<span class="built_in">len</span>([]<span class="keyword">byte</span>(username))),</span><br><span class="line">		Type:     layers.EAPTypeIdentity,</span><br><span class="line">		TypeData: []<span class="keyword">byte</span>(username),</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	buf := gopacket.NewSerializeBuffer()</span><br><span class="line">	opts := gopacket.SerializeOptions&#123;</span><br><span class="line">		FixLengths:       <span class="literal">true</span>,</span><br><span class="line">		ComputeChecksums: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	gopacket.SerializeLayers(buf, opts, &amp;eth, &amp;eap)</span><br><span class="line">	fmt.Println(<span class="string">&quot;send username &quot;</span>, username)</span><br><span class="line">	<span class="keyword">if</span> err := handle.WritePacketData(buf.Bytes()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">sendPassword</span><span class="params">(handle *pcap.Handle, srcMac net.HardwareAddr, destAddr net.HardwareAddr, id <span class="keyword">uint8</span>, password []<span class="keyword">byte</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">	eth := layers.Ethernet&#123;</span><br><span class="line">		SrcMAC:       srcMac,</span><br><span class="line">		DstMAC:       destAddr,</span><br><span class="line">		EthernetType: <span class="number">0x888e</span>,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	eap := layers.EAP&#123;</span><br><span class="line">		Code:     layers.EAPCodeResponse,</span><br><span class="line">		Id:       id,</span><br><span class="line">		Length:   <span class="keyword">uint16</span>(<span class="built_in">len</span>(password)),</span><br><span class="line">		Type:     layers.EAPTypeIdentity,</span><br><span class="line">		TypeData: password,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	buf := gopacket.NewSerializeBuffer()</span><br><span class="line">	opts := gopacket.SerializeOptions&#123;</span><br><span class="line">		FixLengths:       <span class="literal">true</span>,</span><br><span class="line">		ComputeChecksums: <span class="literal">true</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	gopacket.SerializeLayers(buf, opts, &amp;eth, &amp;eap)</span><br><span class="line">	<span class="keyword">if</span> err := handle.WritePacketData(buf.Bytes()); err != <span class="literal">nil</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> err</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
  </entry>
  <entry>
    <title>控制树莓派</title>
    <url>/2020/10/04/rasp-ctl/</url>
    <content><![CDATA[<p>找了一圈没找到一个比较好的能用web控制订阅的工具，自己做一个。中途发现一些比较好的能满足我需求的<a href="https://github.com/twotreesus/V2ray.FunPi">项目</a>，又参考了一下<br>目前树莓派用于</p>
<ul>
<li>主路由</li>
<li>hostapd实现全局代理，并且实现了90DNS用于switch</li>
<li><a href="http://appdown.rrys.tv/rrshareweb_rpi.2.20.tar.gz">人人影视</a></li>
<li>文件共享用于小米盒子等播放</li>
</ul>
<p><img src="/assets/Screenshot_1.png"></p>
<p><a href="https://github.com/8DE4732A/rasp_control">https://github.com/8DE4732A/rasp_control</a></p>
]]></content>
      <categories>
        <category>raspberry</category>
      </categories>
      <tags>
        <tag>raspberry</tag>
      </tags>
  </entry>
  <entry>
    <title>tic80</title>
    <url>/2020/10/04/tic80/</url>
    <content><![CDATA[<p>tic80好玩的游戏收集</p>
<p><img src="https://raw.githubusercontent.com/tasogare66/nibiruman/master/capture/s02.gif"><br><a href="https://github.com/tasogare66/nibiruman">https://github.com/tasogare66/nibiruman</a></p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>洞窟物语</title>
    <url>/2020/10/04/doukutsu/</url>
    <content><![CDATA[<p>Remaking Cavestory in C++<br><a href="https://youtu.be/ETvApbD5xRo">https://youtu.be/ETvApbD5xRo</a></p>
<p>我想用go语言写一个。。。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
  <entry>
    <title>气象云图</title>
    <url>/2020/10/04/china-weather/</url>
    <content><![CDATA[<p>发现<a href="http://www.weather.com.cn/satellite/">中国天气网</a>的气象云图挺好看的，vps上搞了个定时任务，抓取图片，生成视频</p>
<p>定时抓取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line">req = urllib.request.Request(<span class="string">&quot;http://d1.weather.com.cn/satellite2015/JC_YT_DL_WXZXCSYT_4A.html?jsoncallback=readSatellite&amp;callback=jQuery18208455971171376718_&quot;</span> + str(round(time.time() * <span class="number">1000</span>)) + <span class="string">&quot;&amp;_=&quot;</span> + str(round(time.time() * <span class="number">1000</span>)))</span><br><span class="line">req.add_header(<span class="string">&#x27;Referer&#x27;</span>, <span class="string">&#x27;http://www.weather.com.cn/satellite/&#x27;</span>)</span><br><span class="line">req.add_header(<span class="string">&#x27;User-Agent&#x27;</span>, <span class="string">&#x27;Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> urllib.request.urlopen(req) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    data = data[<span class="number">14</span>:<span class="number">-1</span>]</span><br><span class="line">    j = json.loads(data.replace(<span class="string">&#x27;\&#x27;&#x27;</span>,<span class="string">&#x27;\&quot;&#x27;</span>))</span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> j[<span class="string">&#x27;radars&#x27;</span>]:</span><br><span class="line">        print(a[<span class="string">&#x27;ft&#x27;</span>])</span><br><span class="line">        urllib.request.urlretrieve(<span class="string">&quot;http://pi.weather.com.cn/i/product/pic/l/sevp_nsmc_&quot;</span> + a[<span class="string">&#x27;fn&#x27;</span>] + <span class="string">&quot;_lno_py_&quot;</span> + a[<span class="string">&#x27;ft&#x27;</span>] + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&quot;D://weather/&quot;</span> + a[<span class="string">&#x27;ft&#x27;</span>] + <span class="string">&quot;.jpg&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>生成图片<br>先创建软链接用于ffmpeg</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">p = Path(<span class="string">&#x27;D:\weather&#x27;</span>)</span><br><span class="line">file_names = [x.name <span class="keyword">for</span> x <span class="keyword">in</span> p.iterdir()]</span><br><span class="line">nums = sorted([x.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> x <span class="keyword">in</span> file_names])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(nums)):</span><br><span class="line">    Path(<span class="string">&#x27;D:\weather-ffmpeg\\&#x27;</span> + <span class="string">&#x27;&#123;0:06d&#125;&#x27;</span>.format(i) + <span class="string">&#x27;.jpg&#x27;</span>).symlink_to(<span class="string">&#x27;D:\weather\\&#x27;</span> + nums[i] + <span class="string">&#x27;.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/root/ffmpeg/ffmpeg -f image2 -i /root/weather-ffmpeg/%06d.jpg -vcodec libx264 -r 10 /var/http/weather.mp4</span><br></pre></td></tr></table></figure>


<p><a href="https://github.com/8DE4732A/china-weather">https://github.com/8DE4732A/china-weather</a></p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>最福利自动抢京东卡-android</title>
    <url>/2020/10/04/android-webview/</url>
    <content><![CDATA[<p>通过抓包获得h5页面地址，写了一个js可以自动下单。但是我希望晚上可以躺在床上抢，于是</p>
<p><img src="/assets/zuifuli.jpg"></p>
<p><a href="https://github.com/8DE4732A/zufuli_jd">https://github.com/8DE4732A/zufuli_jd</a></p>
]]></content>
  </entry>
  <entry>
    <title>nes模拟器</title>
    <url>/2020/10/06/nes-emulator/</url>
    <content><![CDATA[<p>youtube教程<br><a href="https://youtu.be/nViZg02IMQo">https://youtu.be/nViZg02IMQo</a><br>一个用go语言实现的<br><a href="https://github.com/rbaron/awesomenes">https://github.com/rbaron/awesomenes</a><br><a href="https://github.com/fogleman/nes">https://github.com/fogleman/nes</a><br>硬件参考信息来源<br><a href="http://nesdev.com/">http://nesdev.com/</a></p>
<p>待续。</p>
]]></content>
      <categories>
        <category>game</category>
      </categories>
      <tags>
        <tag>game</tag>
      </tags>
  </entry>
</search>
